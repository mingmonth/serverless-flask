# serverless.yml

service: serverless-flask

plugins:
  - serverless-python-requirements
  - serverless-wsgi
  - serverless-plugin-warmup

custom:
  warmup:
    default:
      enabled: true
      folderName: ".warmup"
      memorySize: 256
      name: warmer-default
      events:
        - schedule: rate(2 minutes)
      package:
        individually: true
        patterns:
          - "!../**"
          - "!../../**"
          - ./**
      timeout: 20
      concurrency: 1
  tableName: "users-table-${self:provider.stage}"
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux

provider:
  tracing:
    apiGateway: true
    lambda: true
  name: aws
  runtime: python3.8
  stage: dev
  region: ap-northeast-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn"] }
  environment:
    USERS_TABLE: ${self:custom.tableName}

functions:
  app:
    handler: wsgi_handler.handler
    events:
      - http: ANY /
      - http: "ANY {proxy+}"
    warmup:
      default:
        enabled: true

resources:
  Resources:
    UsersDynamoDBTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}
